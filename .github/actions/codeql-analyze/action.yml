name: CodeQL Security Analysis

description: "Run CodeQL security analysis on Java codebase"

author: "Skill Tracker DevOps"

inputs:
  repository:
    description: "Repository to checkout (e.g., owner/repo)"
    required: true
  ref:
    description: "Git ref to checkout (commit SHA, branch, or tag)"
    required: true
  token:
    description: "GitHub token for repository access"
    required: true
  language:
    description: "Language to analyze (java, javascript, python, etc.)"
    required: false
    default: "java"
  queries:
    description: "CodeQL query suite to run"
    required: false
    default: "security-and-quality"
  category:
    description: "Category for the analysis results"
    required: false
    default: "codeql-analysis"
  java-version:
    description: "Java version to use for analysis"
    required: false
    default: "21"
  branch:
    description: "Branch name for results upload (e.g., main, develop)"
    required: false
    default: "main"

runs:
  using: "composite"
  steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        repository: ${{ inputs.repository }}
        ref: ${{ inputs.ref }}
        token: ${{ inputs.token }}
        fetch-depth: 0

    - name: Set up JDK
      if: ${{ inputs.language == 'java' }}
      uses: actions/setup-java@v4
      with:
        distribution: temurin
        java-version: ${{ inputs.java-version }}

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ inputs.language }}
        queries: ${{ inputs.queries }}

    - name: Autobuild
      uses: github/codeql-action/autobuild@v3

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: ${{ inputs.category }}
        upload: false
        output: ${{ runner.temp }}/codeql-results

    - name: Upload SARIF to backend repository
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.token }}
      run: |
        # Extract owner and repo from repository input
        REPO="${{ inputs.repository }}"
        OWNER=$(echo "$REPO" | cut -d'/' -f1)
        REPO_NAME=$(echo "$REPO" | cut -d'/' -f2)
        SARIF_FILE="${{ runner.temp }}/codeql-results/${{ inputs.language }}.sarif"

        echo "üì§ Uploading CodeQL results to $OWNER/$REPO_NAME"
        echo "üìÅ SARIF file: $SARIF_FILE"
        echo "üîñ Commit SHA: ${{ inputs.ref }}"
        echo "üåø Branch: ${{ inputs.branch }}"

        # Verify SARIF file exists
        if [ ! -f "$SARIF_FILE" ]; then
          echo "‚ùå SARIF file not found: $SARIF_FILE"
          exit 1
        fi

        # Encode SARIF file to base64 and save to file
        cat "$SARIF_FILE" | gzip | base64 -w 0 > /tmp/sarif_base64.txt

        # Create JSON payload using jq to properly escape everything
        jq -n \
          --arg commit_sha "${{ inputs.ref }}" \
          --arg ref "refs/heads/${{ inputs.branch }}" \
          --arg sarif "$(cat /tmp/sarif_base64.txt)" \
          --arg tool "CodeQL" \
          '{commit_sha: $commit_sha, ref: $ref, sarif: $sarif, tool_name: $tool}' \
          > /tmp/payload.json

        # Upload using GitHub API with payload from file
        RESPONSE=$(curl -X POST \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer $GITHUB_TOKEN" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          -H "Content-Type: application/json" \
          "https://api.github.com/repos/$OWNER/$REPO_NAME/code-scanning/sarifs" \
          --data-binary @/tmp/payload.json \
          -w "\n%{http_code}" \
          -s)

        HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
        BODY=$(echo "$RESPONSE" | head -n -1)

        # Cleanup temporary files
        rm -f /tmp/sarif_base64.txt /tmp/payload.json

        if [ "$HTTP_CODE" -eq 202 ]; then
          echo "‚úÖ CodeQL results uploaded successfully (HTTP $HTTP_CODE)"
          echo "üìä View results: https://github.com/$OWNER/$REPO_NAME/security/code-scanning"
        else
          echo "‚ùå Upload failed (HTTP $HTTP_CODE)"
          echo "Response: $BODY"
          exit 1
        fi
