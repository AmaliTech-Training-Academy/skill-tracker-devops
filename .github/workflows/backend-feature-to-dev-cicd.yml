name: Feature to Dev CI/CD

on:
  # This is a reusable workflow that can be called from other workflows
  workflow_call:
    # Input parameters passed from the calling workflow
    inputs:
      pr_title:
        required: true
        type: string
      pr_author:
        required: true
        type: string
      pr_url:
        required: true
        type: string
      target_branch:
        required: true
        type: string
      repo_name:
        required: true
        type: string
      commit_sha:
        required: true
        type: string
      enable_ecs_deploy:
        required: false
        type: boolean
        default: true
    # Required secrets for AWS authentication, Docker registry, and notifications
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      SLACK_WEBHOOK_URL:
        required: false
      PERSONAL_ACCESS_TOKEN:
        required: true


env:
  AWS_REGION: eu-west-1
  ECR_REGISTRY: 962496666337.dkr.ecr.eu-west-1.amazonaws.com
  ECR_REPOSITORY_PREFIX: sdt/dev

jobs:
  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest

    strategy:
      matrix:
        service:
          # Infrastructure Services
          - name: config-server
            path: skilltracker-infra/config-server
            port: 8081
          - name: discovery-server
            path: skilltracker-infra/discovery-server
            port: 8082
          - name: api-gateway
            path: skilltracker-infra/api-gateway
            port: 8080
          # Business Services
          - name: bff-service
            path: skilltracker-services/bff-service
            port: 8083
          - name: user-service
            path: skilltracker-services/user-service
            port: 8084
          - name: task-service
            path: skilltracker-services/task-service
            port: 8085
          - name: analytics-service
            path: skilltracker-services/analytics-service
            port: 8086
          - name: payment-service
            path: skilltracker-services/payment-service
            port: 8087
          - name: gamification-service
            path: skilltracker-services/gamification-service
            port: 8088
          - name: practice-service
            path: skilltracker-services/practice-service
            port: 8089
          - name: feedback-service
            path: skilltracker-services/feedback-service
            port: 8090
          - name: notification-service
            path: skilltracker-services/notification-service
            port: 8091

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "21"
          cache: "maven"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build Docker image for ${{ matrix.service.name }}
        run: |
          echo "üî® Building ${{ matrix.service.name }} on port ${{ matrix.service.port }}"
          docker build \
            -f ./${{ matrix.service.path }}/Dockerfile \
            -t ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY_PREFIX }}/${{ matrix.service.name }}:latest \
            -t ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY_PREFIX }}/${{ matrix.service.name }}:${{ github.sha }} \
            .

      - name: Push Docker image to ECR
        run: |
          echo "üì§ Pushing ${{ matrix.service.name }} to ECR"
          docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY_PREFIX }}/${{ matrix.service.name }}:latest
          docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY_PREFIX }}/${{ matrix.service.name }}:${{ github.sha }}

      - name: Image digest
        run: |
          echo "‚úÖ Successfully pushed ${{ matrix.service.name }}"
          echo "üì¶ Latest: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY_PREFIX }}/${{ matrix.service.name }}:latest"
          echo "üì¶ Tagged: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY_PREFIX }}/${{ matrix.service.name }}:${{ github.sha }}"

  deploy-to-ecs:
    name: Deploy to ECS
    runs-on: ubuntu-latest
    needs: build-and-push
    if: inputs.enable_ecs_deploy

    strategy:
      matrix:
        service:
          # Infrastructure Services (deploy first)
          - name: config-server
            priority: 1
          - name: discovery-server
            priority: 2
          - name: api-gateway
            priority: 3
          # Business Services (deploy in parallel)
          - name: bff-service
            priority: 4
          - name: user-service
            priority: 4
          - name: task-service
            priority: 4
          - name: analytics-service
            priority: 4
          - name: payment-service
            priority: 4
          - name: gamification-service
            priority: 4
          - name: practice-service
            priority: 4
          - name: feedback-service
            priority: 4
          - name: notification-service
            priority: 4
      max-parallel: 4  # Deploy business services in batches

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get current task definition
        id: get-task-def
        run: |
          TASK_DEF=$(aws ecs describe-task-definition \
            --task-definition sdt-dev-${{ matrix.service.name }} \
            --query 'taskDefinition' \
            --output json)
          echo "task-def=$TASK_DEF" >> $GITHUB_OUTPUT

      - name: Update task definition with new image
        id: update-task-def
        run: |
          # Get the current task definition
          TASK_DEF=$(aws ecs describe-task-definition \
            --task-definition sdt-dev-${{ matrix.service.name }} \
            --query 'taskDefinition' \
            --output json)
          
          # Update the image tag
          NEW_TASK_DEF=$(echo $TASK_DEF | jq --arg IMAGE "${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY_PREFIX }}/${{ matrix.service.name }}:${{ github.sha }}" '
            .containerDefinitions[0].image = $IMAGE |
            del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy)
          ')
          
          # Register new task definition
          NEW_TASK_ARN=$(echo $NEW_TASK_DEF | \
            aws ecs register-task-definition \
            --cli-input-json file:///dev/stdin \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)
          
          echo "task-arn=$NEW_TASK_ARN" >> $GITHUB_OUTPUT
          echo "‚úÖ Registered new task definition: $NEW_TASK_ARN"

      - name: Deploy to ECS service
        run: |
          echo "üöÄ Deploying ${{ matrix.service.name }} to ECS..."
          aws ecs update-service \
            --cluster sdt-dev-cluster \
            --service sdt-dev-${{ matrix.service.name }} \
            --task-definition ${{ steps.update-task-def.outputs.task-arn }} \
            --force-new-deployment \
            --no-cli-pager

      - name: Wait for service stability
        run: |
          echo "‚è≥ Waiting for service to stabilize..."
          aws ecs wait services-stable \
            --cluster sdt-dev-cluster \
            --services sdt-dev-${{ matrix.service.name }}
          echo "‚úÖ Service ${{ matrix.service.name }} is stable!"

  health-check:
    name: Health Check Services
    runs-on: ubuntu-latest
    needs: deploy-to-ecs
    if: inputs.enable_ecs_deploy

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Check ECS service health
        run: |
          echo "üè• Checking health of all services..."
          SERVICES=(
            "config-server"
            "discovery-server"
            "api-gateway"
            "bff-service"
            "user-service"
            "task-service"
            "analytics-service"
            "payment-service"
            "gamification-service"
            "practice-service"
            "feedback-service"
            "notification-service"
          )
          
          ALL_HEALTHY=true
          for service in "${SERVICES[@]}"; do
            echo "Checking sdt-dev-$service..."
            STATUS=$(aws ecs describe-services \
              --cluster sdt-dev-cluster \
              --services sdt-dev-$service \
              --query 'services[0].{Running:runningCount,Desired:desiredCount,Status:status}' \
              --output json)
            
            RUNNING=$(echo $STATUS | jq -r '.Running')
            DESIRED=$(echo $STATUS | jq -r '.Desired')
            
            if [ "$RUNNING" -eq "$DESIRED" ] && [ "$RUNNING" -gt 0 ]; then
              echo "‚úÖ $service: $RUNNING/$DESIRED tasks running"
            else
              echo "‚ùå $service: $RUNNING/$DESIRED tasks running"
              ALL_HEALTHY=false
            fi
          done
          
          if [ "$ALL_HEALTHY" = false ]; then
            echo "‚ö†Ô∏è Some services are not healthy!"
            exit 1
          fi
          
          echo "‚úÖ All services are healthy!"

      - name: Get ALB endpoint
        id: get-alb
        run: |
          ALB_DNS=$(aws elbv2 describe-load-balancers \
            --names sdt-dev-alb \
            --query 'LoadBalancers[0].DNSName' \
            --output text)
          echo "alb-dns=$ALB_DNS" >> $GITHUB_OUTPUT
          echo "üìç ALB Endpoint: http://$ALB_DNS"

  notify-slack:
    name: Notify Slack
    runs-on: ubuntu-latest
    needs: [build-and-push, deploy-to-ecs, health-check]
    if: always()

    steps:
      - name: Determine status
        id: status
        run: |
          if [ "${{ needs.health-check.result }}" == "success" ]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "emoji=:white_check_mark:" >> $GITHUB_OUTPUT
            echo "color=good" >> $GITHUB_OUTPUT
          elif [ "${{ needs.build-and-push.result }}" == "failure" ]; then
            echo "status=failed" >> $GITHUB_OUTPUT
            echo "emoji=:x:" >> $GITHUB_OUTPUT
            echo "color=danger" >> $GITHUB_OUTPUT
          else
            echo "status=partial" >> $GITHUB_OUTPUT
            echo "emoji=:warning:" >> $GITHUB_OUTPUT
            echo "color=warning" >> $GITHUB_OUTPUT
          fi

      - name: Send Slack notification
        uses: slackapi/slack-github-action@v1.26.0
        with:
          payload: |
            {
              "text": "${{ steps.status.outputs.emoji }} Backend Deployment to Dev",
              "attachments": [
                {
                  "color": "${{ steps.status.outputs.color }}",
                  "fields": [
                    {
                      "title": "Status",
                      "value": "${{ steps.status.outputs.status }}",
                      "short": true
                    },
                    {
                      "title": "Environment",
                      "value": "Dev",
                      "short": true
                    },
                    {
                      "title": "PR Title",
                      "value": "${{ inputs.pr_title }}",
                      "short": false
                    },
                    {
                      "title": "Author",
                      "value": "${{ inputs.pr_author }}",
                      "short": true
                    },
                    {
                      "title": "Commit",
                      "value": "<${{ inputs.pr_url }}|View PR>",
                      "short": true
                    },
                    {
                      "title": "Services Deployed",
                      "value": "12 microservices",
                      "short": true
                    },
                    {
                      "title": "Build Result",
                      "value": "${{ needs.build-and-push.result }}",
                      "short": true
                    },
                    {
                      "title": "Deploy Result",
                      "value": "${{ needs.deploy-to-ecs.result }}",
                      "short": true
                    },
                    {
                      "title": "Health Check",
                      "value": "${{ needs.health-check.result }}",
                      "short": true
                    }
                  ],
                  "footer": "GitHub Actions",
                  "footer_icon": "https://github.githubassets.com/favicon.ico",
                  "ts": ${{ github.event.head_commit.timestamp }}
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

  summary:
    name: Deployment Summary
    runs-on: ubuntu-latest
    needs: [build-and-push, deploy-to-ecs, health-check]
    if: always()

    steps:
      - name: Generate summary
        run: |
          echo "## üöÄ Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### Build & Deployment Info" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment:** Dev" >> $GITHUB_STEP_SUMMARY
          echo "- **PR Title:** ${{ inputs.pr_title }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Author:** ${{ inputs.pr_author }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Target Branch:** ${{ inputs.target_branch }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit SHA:** \`${{ inputs.commit_sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### Job Results" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Build & Push | ${{ needs.build-and-push.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Deploy to ECS | ${{ needs.deploy-to-ecs.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Health Check | ${{ needs.health-check.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### Services Deployed (12)" >> $GITHUB_STEP_SUMMARY
          echo "#### Infrastructure Services" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Config Server (8081)" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Discovery Server (8082)" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ API Gateway (8080)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### Business Services" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ BFF Service (8083)" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ User Service (8084)" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Task Service (8085)" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Analytics Service (8086)" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Payment Service (8087)" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Gamification Service (8088)" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Practice Service (8089)" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Feedback Service (8090)" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Notification Service (8091)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### Container Registry" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "Registry: 962496666337.dkr.ecr.eu-west-1.amazonaws.com/sdt/dev/" >> $GITHUB_STEP_SUMMARY
          echo "Image Tag: ${{ inputs.commit_sha }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### ECS Cluster" >> $GITHUB_STEP_SUMMARY
          echo "- **Cluster:** sdt-dev-cluster" >> $GITHUB_STEP_SUMMARY
          echo "- **Region:** eu-west-1" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.health-check.result }}" == "success" ]; then
            echo "### ‚úÖ Deployment Successful!" >> $GITHUB_STEP_SUMMARY
            echo "All services are healthy and running." >> $GITHUB_STEP_SUMMARY
          else
            echo "### ‚ö†Ô∏è Deployment Issues" >> $GITHUB_STEP_SUMMARY
            echo "Some jobs did not complete successfully. Check the logs above." >> $GITHUB_STEP_SUMMARY
          fi
