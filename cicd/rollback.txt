name: Rollback Deployment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to rollback'
        required: true
        type: choice
        options:
          - dev
          - staging
          - production
      service:
        description: 'Service to rollback (or "all" for all services)'
        required: true
        type: string
        default: 'all'
      revision:
        description: 'Task definition revision to rollback to (optional)'
        required: false
        type: string

env:
  AWS_REGION: eu-west-1
  ECS_CLUSTER: skilltracker-cluster

jobs:
  # ============================================================
  # Rollback Service
  # ============================================================
  rollback:
    name: Rollback ${{ github.event.inputs.service }}
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get services to rollback
        id: services
        run: |
          if [ "${{ github.event.inputs.service }}" = "all" ]; then
            echo "services=discovery-server config-server api-gateway user-service task-service feedback-service payment-service practice-service analytics-service gamification-service notification-service bff-service" >> $GITHUB_OUTPUT
          else
            echo "services=${{ github.event.inputs.service }}" >> $GITHUB_OUTPUT
          fi

      - name: Rollback services
        run: |
          for service in ${{ steps.services.outputs.services }}; do
            echo "Rolling back $service..."
            
            if [ -n "${{ github.event.inputs.revision }}" ]; then
              # Rollback to specific revision
              aws ecs update-service \
                --cluster ${{ env.ECS_CLUSTER }}-${{ github.event.inputs.environment }} \
                --service ${service}-${{ github.event.inputs.environment }} \
                --task-definition ${service}-${{ github.event.inputs.environment }}:${{ github.event.inputs.revision }} \
                --force-new-deployment
            else
              # Rollback to previous task definition
              CURRENT_TASK_DEF=$(aws ecs describe-services \
                --cluster ${{ env.ECS_CLUSTER }}-${{ github.event.inputs.environment }} \
                --services ${service}-${{ github.event.inputs.environment }} \
                --query 'services[0].taskDefinition' \
                --output text | cut -d':' -f2)
              
              PREVIOUS_REVISION=$((CURRENT_TASK_DEF - 1))
              
              aws ecs update-service \
                --cluster ${{ env.ECS_CLUSTER }}-${{ github.event.inputs.environment }} \
                --service ${service}-${{ github.event.inputs.environment }} \
                --task-definition ${service}-${{ github.event.inputs.environment }}:${PREVIOUS_REVISION} \
                --force-new-deployment
            fi
            
            echo "Waiting for $service to stabilize..."
            aws ecs wait services-stable \
              --cluster ${{ env.ECS_CLUSTER }}-${{ github.event.inputs.environment }} \
              --services ${service}-${{ github.event.inputs.environment }}
            
            echo "✅ $service rolled back successfully"
          done

      - name: Send notification
        uses: slackapi/slack-github-action@v1
        with:
          payload: |
            {
              "text": "⚠️ Rollback executed on ${{ github.event.inputs.environment }}",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Rollback Executed*\n*Environment:* ${{ github.event.inputs.environment }}\n*Service(s):* ${{ github.event.inputs.service }}\n*Executed by:* ${{ github.actor }}"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        continue-on-error: true

