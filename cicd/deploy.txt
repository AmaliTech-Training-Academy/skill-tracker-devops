
name: CD - Deploy to AWS ECS

on:
  push:
    branches:
      - dev        # Deploy to dev environment
      - staging    # Deploy to staging environment
      - main       # Deploy to production environment
  workflow_dispatch:  # Manual trigger
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        type: choice
        options:
          - dev
          - staging
          - production

env:
  AWS_REGION: eu-west-1
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.eu-west-1.amazonaws.com
  ECS_CLUSTER: skilltracker-cluster

jobs:
  # ============================================================
  # Job 1: Determine Environment
  # ============================================================
  setup:
    name: Setup Deployment
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
      
    steps:
      - name: Determine environment
        id: set-env
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "environment=production" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" = "refs/heads/staging" ]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
          else
            echo "environment=dev" >> $GITHUB_OUTPUT
          fi

  # ============================================================
  # Job 2: Build & Push Docker Images
  # ============================================================
  build-push-images:
    name: Build & Push Images
    runs-on: ubuntu-latest
    needs: setup
    strategy:
      matrix:
        include:
          # Infrastructure
          - service: discovery-server
            path: skilltracker-infra/discovery-server
          - service: config-server
            path: skilltracker-infra/config-server
          - service: api-gateway
            path: skilltracker-infra/api-gateway
          # Business Services
          - service: user-service
            path: skilltracker-services/user-service
          - service: task-service
            path: skilltracker-services/task-service
          - service: feedback-service
            path: skilltracker-services/feedback-service
          - service: payment-service
            path: skilltracker-services/payment-service
          - service: practice-service
            path: skilltracker-services/practice-service
          - service: analytics-service
            path: skilltracker-services/analytics-service
          - service: gamification-service
            path: skilltracker-services/gamification-service
          - service: notification-service
            path: skilltracker-services/notification-service
          - service: bff-service
            path: skilltracker-services/bff-service
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.ECR_REGISTRY }}/skilltracker/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=semver,pattern={{version}}
            type=raw,value=${{ needs.setup.outputs.environment }}
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}

      - name: Build and push image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ matrix.path }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}
            VERSION=${{ needs.setup.outputs.environment }}

  # ============================================================
  # Job 3: Deploy Infrastructure Services
  # ============================================================
  deploy-infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: [setup, build-push-images]
    environment: 
      name: ${{ needs.setup.outputs.environment }}
    strategy:
      matrix:
        service: 
          - discovery-server
          - config-server
          - api-gateway
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download task definition
        run: |
          aws ecs describe-task-definition \
            --task-definition ${{ matrix.service }}-${{ needs.setup.outputs.environment }} \
            --query taskDefinition > task-definition.json

      - name: Fill in new image ID
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ matrix.service }}
          image: ${{ env.ECR_REGISTRY }}/skilltracker/${{ matrix.service }}:${{ needs.setup.outputs.environment }}

      - name: Deploy to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ matrix.service }}-${{ needs.setup.outputs.environment }}
          cluster: ${{ env.ECS_CLUSTER }}-${{ needs.setup.outputs.environment }}
          wait-for-service-stability: true
          wait-for-minutes: 10

  # ============================================================
  # Job 4: Deploy Business Services
  # ============================================================
  deploy-services:
    name: Deploy Services
    runs-on: ubuntu-latest
    needs: [setup, build-push-images, deploy-infrastructure]
    environment: 
      name: ${{ needs.setup.outputs.environment }}
    strategy:
      matrix:
        service:
          - user-service
          - task-service
          - feedback-service
          - payment-service
          - practice-service
          - analytics-service
          - gamification-service
          - notification-service
          - bff-service
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download task definition
        run: |
          aws ecs describe-task-definition \
            --task-definition ${{ matrix.service }}-${{ needs.setup.outputs.environment }} \
            --query taskDefinition > task-definition.json

      - name: Fill in new image ID
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ matrix.service }}
          image: ${{ env.ECR_REGISTRY }}/skilltracker/${{ matrix.service }}:${{ needs.setup.outputs.environment }}

      - name: Deploy to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ matrix.service }}-${{ needs.setup.outputs.environment }}
          cluster: ${{ env.ECS_CLUSTER }}-${{ needs.setup.outputs.environment }}
          wait-for-service-stability: true
          wait-for-minutes: 10

  # ============================================================
  # Job 5: Run Database Migrations
  # ============================================================
  database-migrations:
    name: Run Database Migrations
    runs-on: ubuntu-latest
    needs: [setup, deploy-infrastructure]
    environment: 
      name: ${{ needs.setup.outputs.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get RDS endpoint
        id: rds
        run: |
          ENDPOINT=$(aws rds describe-db-instances \
            --db-instance-identifier skilltracker-${{ needs.setup.outputs.environment }} \
            --query 'DBInstances[0].Endpoint.Address' \
            --output text)
          echo "endpoint=$ENDPOINT" >> $GITHUB_OUTPUT

      - name: Run Flyway migrations
        uses: docker://flyway/flyway:latest
        with:
          args: |
            -url=jdbc:postgresql://${{ steps.rds.outputs.endpoint }}:5432/skilltracker_db \
            -user=${{ secrets.DB_USER }} \
            -password=${{ secrets.DB_PASSWORD }} \
            -locations=filesystem:./db/migrations \
            migrate
        env:
          FLYWAY_BASELINE_ON_MIGRATE: true

  # ============================================================
  # Job 6: Smoke Tests
  # ============================================================
  smoke-tests:
    name: Smoke Tests
    runs-on: ubuntu-latest
    needs: [setup, deploy-services]
    environment: 
      name: ${{ needs.setup.outputs.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get ALB DNS
        id: alb
        run: |
          DNS=$(aws elbv2 describe-load-balancers \
            --names skilltracker-alb-${{ needs.setup.outputs.environment }} \
            --query 'LoadBalancers[0].DNSName' \
            --output text)
          echo "dns=$DNS" >> $GITHUB_OUTPUT
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ env.AWS_REGION }}

      - name: Wait for services
        run: sleep 60

      - name: Test Discovery Server
        run: |
          curl -f http://${{ steps.alb.outputs.dns }}:8082/actuator/health || exit 1

      - name: Test Config Server
        run: |
          curl -f http://${{ steps.alb.outputs.dns }}:8081/actuator/health || exit 1

      - name: Test API Gateway
        run: |
          curl -f http://${{ steps.alb.outputs.dns }}:8080/actuator/health || exit 1

      - name: Test User Service
        run: |
          curl -f http://${{ steps.alb.outputs.dns }}:8080/api/v1/users/actuator/health || exit 1

  # ============================================================
  # Job 7: Notify Deployment
  # ============================================================
  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [setup, smoke-tests]
    if: always()
    
    steps:
      - name: Send Slack notification
        uses: slackapi/slack-github-action@v1
        with:
          payload: |
            {
              "text": "Deployment to ${{ needs.setup.outputs.environment }} ${{ job.status }}",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*SkillTracker Backend Deployment*\n*Environment:* ${{ needs.setup.outputs.environment }}\n*Status:* ${{ job.status }}\n*Commit:* ${{ github.sha }}\n*Author:* ${{ github.actor }}"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        continue-on-error: true

